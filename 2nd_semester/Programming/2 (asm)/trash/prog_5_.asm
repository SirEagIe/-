.MODEL SMALL						;Модель памяти ближнего типа
.386
.CODE								;Открыть сегмент кодов
Start:
	mov AX, @DATA					;Инициализировать
	mov DS, AX						;сегментный регистр DS
	mov EAX, M_1					;Записать в расширенный регистр EAX значение переменной M_1
	mov M_2, EAX					;Записать в переменную M_2 значение расширенного регистра EAX
	mov BP, SP						;Записать в регистр BP значение регистра SP
	mov AX, Z1[2]					;Записать в регистр AX второй элемент массива Z1
	mov [BP], AX					;Записать содержимое AX в ячейку памяти по адресу, находящемуся в BP (в стек)
	sub SP, 2						;Уменьшить указатель на вершину стека SP на 2
	mov BP, SP						;Записать в регистр BP значение регистра SP
	mov AX, Z1[6]					;Записать в регистр AX четвёртый элемент массива Z1
	mov [BP], AX					;Записать содержимое AX в ячейку памяти по адресу, находящемуся в BP (в стек)
	mov AH, 4Ch						;Завершить программу
	mov AL, 0						;с помощью
	int 21h							;DOS
.DATA								;Начало сегмента данных
	var_1 DB 11000110b				;Определить переменную var_1 размером байт с начальным значением 11000110b
	var_2 DW 9FFEh					;Определить переменную var_2 размером слово с начальным значением 9FFEh
	var_3 DB ?						;Определить переменную var_3 размером байт не задавая её начального значения
	var_4 DW ?						;Определить переменную var_4 размером слово не задавая её начального значения
	M_1 DD 0FF00FFEEh				;Определить переменную M_1 размером двойное слово с начальным значением 0FF00FFEEh
	M_2 DD ?						;Определить переменную M_2 размером двойное слово не задавая её начального значения
	String DB 'Assembler', '&'		;Определить строку символов String, каждый символ которой имеет размер байт, с начальным значением Assembler
	M1 DB 7,9,28,46,39,31,20,25		;Определить массив с именем M1, состоящий из восьми числовых элементов размеров байт
	M2 DB 12,15,7,25,31,38,20,63	;Определить массив с именем M2, состоящий из восьми числовых элементов размеров байт
	Z1 DW 48,256,300,511,31,512		;Определить массив с именем Z1, состоящий из шести числовых элементов размеров слово
	Z2 DW 0EEh,99Fh,300h,51AAh		;Определить массив с именем Z2, состоящий из четырёх числовых элементов размеров слово
	SIM DB 'QWERTYUIOP'				;Создать массив с именем SIM
		DB 'ЙЦУКЕНГШЩЗ'				;из трёх строк
		DB 'POIUYTREWQ'				;по 10 символов в каждой
.STACK 100h							;Определить стек размером 100h
END Start							;Конец исходного модуля


	mov AX, @DATA					;(первый операнд - прямая регистровая адресация)
	mov DS, AX						;(первый операнд - прямая регистровая адресация, второй операнд - прямая регистровая адресация)
	mov EAX, M_1					;(первый операнд - прямая регистровая адресация, второй операнд - прямая адресация к памяти)
	mov M_2, EAX					;(первый операнд - прямая адресация к памяти, второй операнд - прямая регистровая адресация)
	mov BP, SP						;(первый операнд - прямая регистровая адресация, второй операнд - прямая регистровая адресация)
	mov AX, Z1[2]					;(первый операнд - прямая регистровая адресация, второй операнд - косвенная регистровая адресация со смещением)
	mov [BP], AX					;(первый операнд - косвенная регистровая адресация, второй операнд - прямая регистровая адресация)
	sub SP, 2						;(первый операнд - прямая регистровая адресация, второй операнд - непосредственная адресация)
	mov BP, SP						;(первый операнд - прямая регистровая адресация, второй операнд - прямая регистровая адресация)
	mov AX, Z1[6]					;(первый операнд - прямая регистровая адресация, второй операнд - косвенная регистровая адресация со смещением)
	mov [BP], AX					;(первый операнд - косвенная регистровая адресация, второй операнд - прямая регистровая адресация)
	mov AH, 4Ch						;(первый операнд - прямая регистровая адресация, второй операнд - непосредственная адресация)
	mov AL, 0						;(первый операнд - прямая регистровая адресация, второй операнд - непосредственная адресация)
	int 21h							;(непосредственная адресация)
	
	