TITLE CIRCL
;Программа вычисления координат точек окружности и вывод их на экран
;Входные параметры:
;константа для перевода грудусы в радианы x360
;число точкек на окружности x36
;цвет пиксела forcolor
;координаты центра окружности xc и yc
;значения радиусов по осям x и y rx, ry
;строка с координатами центра окружности xc_yc
;Выходные параметры:
;координаты точки на окружности x и y
;угол поворота радиус-вектора для точки на окружности angl
.MODEL SMALL	;Модель памяти ближнего типа
.STACK 256	;Отвести под стек 256 байт
.486	;Используем расширенную систему команд
.DATA	;Открыть сегмент данных
	x360 DD 180.0	;Константа перевода градусы–радианы
	x36 DW 360	;Число точек на окружности
	forcolor DB 0Ah	;Салатовый цвет
	xc DW 150	;Координаты центра
	yc DW 100	;окружности
	rx DW 100	;Значения радиуса по оси x
	ry DW 80	;Значения радиуса по оси y
	xc_yc DB '150,100','$'	;Выводимые значения координат
;=============================Переменные=============================
	x DW ?	;Координата точки окружности x
	y DW ?	;Координата точки окружности y
	angl DW 1	;Угол поворота радиуса
;--------------------------------------------------------------------
.CODE	;Открыть сегмент кодов
;===========================Вывод пикселя============================
Point PROC	;Начать процедуру с именем Point
;CX – координата X (столбец), DX – координата Y (строка),
;AL – цвет пиксела
	pusha	;Поместить в стек значения всех 16-битных регистров общего назначения
	mov CX, xc	;Вычисляем координату
	add CX, x	;x в регистре CX
	mov DX, yc	;Вычисляем координату
	sub DX, y	;y в регистре DX
	mov AL, forcolor	;Установка заданного цвета
	mov BH, 0		;Номер страницы - 0
	mov AH, 12	;Вывести пиксел
	int 10h	;средствами BIOS
	popa	;Извлечь из стека значения всех 16-битных регистров общего назначения
	ret	;Возврат из процедуры
Point ENDP	;Закончитьпроцедуру с именем Point
;===================Закрашивание экрана цветом фона==================
Fon PROC	;Начать процедуру с именем Fon
;CX – координата X (столбец), DX – координата Y (строка),
;AL – цвет пиксела
	pusha	;Поместить в стек значения всех 16-битных регистров общего назначения
	mov CX, 0	;Начальная координата X (столбец) - 0
	mov DX, 0	;Начальная координата Y (строка) - 0
	mov AL, 05h	;Цвет фона - сиреневый
	mov BH, 0	;Номер страницы - 0
c_1:
	mov AH, 12	;Вывести пиксел
	int 10h	;средствами BIOS
	inc CX	;Увеличить координату X на 1
	cmp CX, 319	;Если координата X
	jne c_1	;не равна 319, перейти к метке c_1
	xor CX, CX	;Иначе - очистить CX (установить X = 0)
	inc DX	;Увеличить координату Y на 1
	cmp DX, 199	;Если координата Y
	jne c_1	;не равна 199, перейти к метке c_1
	popa	;Извлечь из стека значения всех 16-битных регистров общего назначения
	ret	;Возврат из процедуры
Fon ENDP	;Закончитьпроцедуру с именем Fon
;===========================Вывод символа============================
Simv PROC	;Начать процедуру с именем Simv
	pusha	;Поместить в стек значения всех 16-битных регистров общего назначения
	mov AH, 02	;Функция установки курсора
	mov BH, 0	;Номер текущей страницы - 0
	mov DL, 20	;Номер столбца - 20
	mov DH, 12	;Номер строки - 12
	int 10h	;Установка курсора
	lea SI, xc_yc	;Загрузить смещение строки в SI
c_2:
	mov AH, 0Eh	;Функция вывода символа
	mov BL, 84h	;Выбор цвета символов (красный)
	lodsb	;Переслать символ из строки DS:SI в AL
	cmp AL, '$'	;Определить конец строки
	je exit_pr	;Если конец строки достигнут, выход
	int 10h	;Иначе - вывести символ
	jmp c_2	;и перейти к метке c_2
exit_pr:
	popa	;Извлечь из стека значения всех 16-битных регистров общего назначения
	ret	;Возврат из процедуры
Simv ENDP	;Закончитьпроцедуру с именем Simv
;======================Ожидание нажатия клавиши======================
WaitKey PROC	;Начать процедуру с именем WaitKey
	pusha	;Поместить в стек значения всех 16-битных регистров общего назначения
	mov AH, 08h	;Пауза да
	int 21h	;нажатия клавиши
	popa	;Извлечь из стека значения всех 16-битных регистров общего назначения
	ret	;Возврат из процедуры
WaitKey ENDP	;Закончитьпроцедуру с именем WaitKey
;=========================Главная процедура==========================
Main PROC	;Начать процедуру с именем Main
;Подготовка данных
	mov AX, @DATA	;Инициализация
	mov DS, AX	;регистра DS
	mov AH, 0	;Установка графического
	mov AL, 0Dh	;режима 320x200x16
	Int 10h	;средствами bios
	call Fon	;Вызов процедуры закрашивания фона
	call WaitKey	;Вызов процедуры задержки
	mov CX, x36	;Число шагов построения окружности
	finit	;Инициализация сопроцессора
	fldpi	;Загрузка в стек числа pi
	fld x360	;Загрузка в стек числа 180
	fdiv	;pi/180, результат в ST(0)
	fstp x360	;Сохранение в памяти коэффициента перевода градусов в радианы
;---------------Вычисление координат точек окружности----------------
do:
	fld x360	;Коэффициент градус->радиан в стек
	fild angl	;Очередное значения угла в стек
	fmul	;Перевод в радианы
	fsincos	;sin(x) -> st(1), cos(x) -> st(0)
	fild rx	;Загрузка радиуса по координате x
	fmul	;Вычисление координаты x=rx*cos(angl)
	fistp x	;Запись ее в память в формате целого числа с извлечением из стека
	fild ry	;Загрузка радиуса по координате y
	fmul	;Вычисление координаты y=ry*sin(angl)
	fistp y	;Запись ее в память в формате целого числа с извлечением из стека
	fwait	;Ожидание завершения работы сопроцессора
	call Point	;Вывод точки на экран
	inc Angl	;Приращение угла
	loop do	;Повторить цикл, пока CX не 0
	call Simv	;Вывести символьную строку на экран
	call WaitKey	;Пауза до нажатия клавиши
	mov AX, 4C00h	;Выход в
	int 21h	;DOS
Main ENDP	;Закончитьпроцедуру с именем Main
END Main	;Конец исходного модуля