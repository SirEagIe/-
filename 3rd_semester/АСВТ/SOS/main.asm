init:	;инициализация стека
	LDI R16, LOW(RAMEND)
	OUT SPL, R16
	LDI R16, HIGH(RAMEND)
	OUT SPH, R16
;########################################################################;
start:
	LDI R16, 255	;Настройка порта А
	OUT DDRA, R16	;на выход

	LDI R25, 1	;Загрузка в R25 числа 1
	LDI R26, 3	;Загрузка в R26 числа 3
	LDI R27, 6	;Загрузка в R27 числа 6
ne3:
	LDI R28, 3	;Загрузка в R28 числа 3
eq4:
	CPI R28, 3	;Сравнить R28 с 3
	BREQ eq1
	BRNE ne1
eq1:	;Равно
	MOV R30, R25	;Загрузка в R30 числа 1
 	JMP cont
ne1:	;Не равно
	CPI R28, 2	;Сравнить R28 с 2
	BREQ eq2
	BRNE ne2
eq2:	;Равно
	MOV R30, R26	;Загрузка в R30 числа 3
	JMP cont
ne2:	;Не равно
	CPI R28, 1	;Сравнить R28 с 1
	BREQ eq3
	BRNE ne3
eq3:	;Равно
	MOV R30, R25	;Загрузка в R30 числа 1
	JMP cont
cont:
	DEC R28	;Уменьшить R28 на 1
	LDI R29, 6	;Загрузить в R29 чило 6
ne4:
	STS $0060, R30	;Скопировать R30 в $0060
	CALL delay	;Вызов подпрограммы задержки
	LDI R16, 16		;Инверсия
	IN R17, PORTA	;5 бита
	EOR R17, R16	;порта А
	OUT PORTA, R17	;и вывод на порт A
	DEC R26	;Уменьшить R26 на 1
	CPI R26, 0	;Сравнить R26 с 0
	BRNE ne4	;Не равны
	BREQ eq4	;Равны

;########################################################################;
delay:
	PUSH R16	;положить R16 в стек
	PUSH R17	;положить R17 в стек
	PUSH R18	;положить R18 в стек
	PUSH R19	;положить R19 в стек
	LDS R16, $0060	;загрузить в R16 состояние регистра $0060
	LDI R19, 1	;загрузить в R19 1
m1:
	CLR R17	;сбросить R17
	CLR R18	;сбросить R18
m2:
	NOP
	NOP
	NOP
	INC R17	;увеличить R17 на 1
	BRNE m2	;если R17 не переполнен, перейти к m2
	INC R18	;увеличить R18 на 1
	BRNE m2	;если R18 не переполнен, перейти к m2
	DEC R16	;уменьшить R16 на 1
	BRNE m1	;если R16 не равен 0, перейти к m1
	POP R19	;достать R19 из стека
	POP R18	;достать R18 из стека
	POP R17	;достать R17 из стека
	POP R16	;достать R16 из стека
	RET